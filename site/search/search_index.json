{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"UIU Management System Documentation Project Overview The University Management System is a comprehensive software designed to streamline various administrative tasks within the university environment. This system facilitates effective communication and resource management among students, faculty, staff, and administrators. Click on the live url to explore the site with demo data uiu-ms live url If you are facing any problem with live site url , then you can see the project demo video Features Student User: Enroll Course: Easily search and enroll in courses. Counseling Requests: Request counseling sessions during allocated faculty times. Blogs and Notes Sharing: Share blogs and important notes with other students. Shuttle Schedules: Real-time shuttle schedules for easy tracking. Faculty User: Counseling Acceptance: Accept or reject counseling requests from students. Blogs Sharing: Share educational blogs with students. Material Request: Request necessary classroom or office materials. Shuttle Schedule: Access updated shuttle schedules. Staff User: Material Acceptance: Accept material requests from faculty members. Shuttle Updates: Update real-time shuttle schedules. Issue Reporting: Report issues to the administration. Admin User: User Management: Add, update, or remove students, faculty, and staff. Issue Resolution: Manage reported issues and ensure solutions. Access Management: Control access to sensitive information. Manager Access: Review and update user information.","title":"Home"},{"location":"#uiu-management-system-documentation","text":"","title":"UIU Management System Documentation"},{"location":"#project-overview","text":"The University Management System is a comprehensive software designed to streamline various administrative tasks within the university environment. This system facilitates effective communication and resource management among students, faculty, staff, and administrators. Click on the live url to explore the site with demo data uiu-ms live url If you are facing any problem with live site url , then you can see the project demo video","title":"Project Overview"},{"location":"#features","text":"","title":"Features"},{"location":"#student-user","text":"Enroll Course: Easily search and enroll in courses. Counseling Requests: Request counseling sessions during allocated faculty times. Blogs and Notes Sharing: Share blogs and important notes with other students. Shuttle Schedules: Real-time shuttle schedules for easy tracking.","title":"Student User:"},{"location":"#faculty-user","text":"Counseling Acceptance: Accept or reject counseling requests from students. Blogs Sharing: Share educational blogs with students. Material Request: Request necessary classroom or office materials. Shuttle Schedule: Access updated shuttle schedules.","title":"Faculty User:"},{"location":"#staff-user","text":"Material Acceptance: Accept material requests from faculty members. Shuttle Updates: Update real-time shuttle schedules. Issue Reporting: Report issues to the administration.","title":"Staff User:"},{"location":"#admin-user","text":"User Management: Add, update, or remove students, faculty, and staff. Issue Resolution: Manage reported issues and ensure solutions. Access Management: Control access to sensitive information. Manager Access: Review and update user information.","title":"Admin User:"},{"location":"api/","text":"API Reference Endpoints Course Enrollment Request $.ajax({ url: '/enroll', method: 'POST', data: { courseId: 'COURSE_ID', userId: 'USER_ID', }, success: function(response) { console.log(response); }, error: function(error) { console.error(error); } }); Counseling Request Request $.ajax({ url: '/request-counseling', method: 'POST', data: { facultyId: 'FACULTY_ID', studentId: 'STUDENT_ID', requestedTime: 'TIME', }, success: function(response) { console.log(response); }, error: function(error) { console.error(error); } }); Blog Sharing Request $.ajax({ url: '/share-blog', method: 'POST', data: { title: 'BLOG_TITLE', content: 'BLOG_CONTENT', authorId: 'AUTHOR_ID', }, success: function(response) { console.log(response); }, error: function(error) { console.error(error); } }); Shuttle Schedule Request $.ajax({ url: '/shuttle-schedule', method: 'GET', success: function(response) { console.log(response); }, error: function(error) { console.error(error); } });","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#endpoints","text":"","title":"Endpoints"},{"location":"api/#course-enrollment","text":"","title":"Course Enrollment"},{"location":"api/#request","text":"$.ajax({ url: '/enroll', method: 'POST', data: { courseId: 'COURSE_ID', userId: 'USER_ID', }, success: function(response) { console.log(response); }, error: function(error) { console.error(error); } });","title":"Request"},{"location":"api/#counseling-request","text":"","title":"Counseling Request"},{"location":"api/#request_1","text":"$.ajax({ url: '/request-counseling', method: 'POST', data: { facultyId: 'FACULTY_ID', studentId: 'STUDENT_ID', requestedTime: 'TIME', }, success: function(response) { console.log(response); }, error: function(error) { console.error(error); } });","title":"Request"},{"location":"api/#blog-sharing","text":"","title":"Blog Sharing"},{"location":"api/#request_2","text":"$.ajax({ url: '/share-blog', method: 'POST', data: { title: 'BLOG_TITLE', content: 'BLOG_CONTENT', authorId: 'AUTHOR_ID', }, success: function(response) { console.log(response); }, error: function(error) { console.error(error); } });","title":"Request"},{"location":"api/#shuttle-schedule","text":"","title":"Shuttle Schedule"},{"location":"api/#request_3","text":"$.ajax({ url: '/shuttle-schedule', method: 'GET', success: function(response) { console.log(response); }, error: function(error) { console.error(error); } });","title":"Request"},{"location":"contribution/","text":"Contributor Team Details Saif Tasnim Chowhdury - Captain maintain the version control system (git) focused on merging and removing conflict branch merge inspired team member for their work handle the bug of code and fix the issue worked on authenticating user to the system and develop an authentication system maintain the server side code with creating api and connect with frontend features Arafat Hossen - Vice Captain worked on the self branch handle the team member in emergency case also worked on fixing bug related issue worked on developing student panel features Abdul Muhit Chowdhury - FrontEnd Ninja worked on the self branch worked on developing admin panel features also worked on fixing bug related issue focused on improving code formation Iftakharul Islam Ifty - UX/UI Majestro worked on the self branch worked on developing staff panel features also worked on fixing bug related issue focused on improving ui design Sirajum Monira Soha - Code Conductor worked on the self branch worked on developing faculty panel features also worked on fixing bug related issue helps to choose and use good quality animation and images","title":"Contributor"},{"location":"contribution/#contributor","text":"","title":"Contributor"},{"location":"contribution/#team-details","text":"Saif Tasnim Chowhdury - Captain maintain the version control system (git) focused on merging and removing conflict branch merge inspired team member for their work handle the bug of code and fix the issue worked on authenticating user to the system and develop an authentication system maintain the server side code with creating api and connect with frontend features Arafat Hossen - Vice Captain worked on the self branch handle the team member in emergency case also worked on fixing bug related issue worked on developing student panel features Abdul Muhit Chowdhury - FrontEnd Ninja worked on the self branch worked on developing admin panel features also worked on fixing bug related issue focused on improving code formation Iftakharul Islam Ifty - UX/UI Majestro worked on the self branch worked on developing staff panel features also worked on fixing bug related issue focused on improving ui design Sirajum Monira Soha - Code Conductor worked on the self branch worked on developing faculty panel features also worked on fixing bug related issue helps to choose and use good quality animation and images","title":"Team Details"},{"location":"demoinfo/","text":"Demo Data For Use Student Account : email : schowdhury201223@bscse.uiu.ac.bd password: 123456 Faculty Account : email : abir@cse.uiu.ac.bd password: 123456 Staff Account : email : rahman@staff.uiu.ac.bd password: 123456 Admin Account : email : admin@gmail.com password: admin1234","title":"Demo Information"},{"location":"demoinfo/#demo-data-for-use","text":"","title":"Demo Data For Use"},{"location":"demoinfo/#student-account","text":"email : schowdhury201223@bscse.uiu.ac.bd password: 123456","title":"Student Account :"},{"location":"demoinfo/#faculty-account","text":"email : abir@cse.uiu.ac.bd password: 123456","title":"Faculty Account :"},{"location":"demoinfo/#staff-account","text":"email : rahman@staff.uiu.ac.bd password: 123456","title":"Staff Account :"},{"location":"demoinfo/#admin-account","text":"email : admin@gmail.com password: admin1234","title":"Admin Account :"},{"location":"guideline/","text":"User Guidelines This guide provides an overview of how to use the University Management System. User Roles The system supports the following user roles: Student : Enrolls in courses, requests counseling, shares blogs, and accesses shuttle schedules. Faculty : Accepts counseling requests, shares blogs, requests materials, and accesses shuttle schedules. Staff : Accepts material requests, updates shuttle schedules, and reports issues. Admin : Manages users, handles issues, and supervises system operations. Functionality Overview Student User Enroll in Courses : Search for courses and enroll easily. View enrolled courses on the dashboard. Counseling Request : Request counseling within the faculty's allocated time. Blogs and Notes : Share blogs with other students. Share important notes. Shuttle Schedules : View real-time shuttle schedules. Faculty User Counseling Acceptance : Accept or reject student counseling requests. Blogs Sharing : Share blogs with students. Material Request : Request materials needed in the classroom. Shuttle Schedule : Access shuttle schedule information. Staff User Accept Requests : Accept material requests from faculty. Shuttle Update : Update real-time shuttle schedules. Issue Reporting : Report any issues to the admin. Admin User User Management : Add students, faculty, and staff. Issue Handling : Monitor and resolve reported issues. System Management : Supervise system operations and user data. Step-by-Step Usage Enrolling in a Course : Access the course enrollment section. Search for desired courses. Click \"Enroll\" to join a course. Requesting Counseling : Navigate to the counseling section. Choose a suitable time within the faculty's availability. Sharing Blogs and Notes : Visit the blog-sharing page. Click \"Save & Share\" to publish a blog or important note. Accessing Shuttle Schedules : Open the shuttle schedules section. View real-time shuttle departure times. Troubleshooting If encountering issues or needing further assistance, please contact the admin or relevant support personnel for assistance. Enjoy using the University Management System!","title":"User GuideLines"},{"location":"guideline/#user-guidelines","text":"This guide provides an overview of how to use the University Management System.","title":"User Guidelines"},{"location":"guideline/#user-roles","text":"The system supports the following user roles: Student : Enrolls in courses, requests counseling, shares blogs, and accesses shuttle schedules. Faculty : Accepts counseling requests, shares blogs, requests materials, and accesses shuttle schedules. Staff : Accepts material requests, updates shuttle schedules, and reports issues. Admin : Manages users, handles issues, and supervises system operations.","title":"User Roles"},{"location":"guideline/#functionality-overview","text":"","title":"Functionality Overview"},{"location":"guideline/#student-user","text":"Enroll in Courses : Search for courses and enroll easily. View enrolled courses on the dashboard. Counseling Request : Request counseling within the faculty's allocated time. Blogs and Notes : Share blogs with other students. Share important notes. Shuttle Schedules : View real-time shuttle schedules.","title":"Student User"},{"location":"guideline/#faculty-user","text":"Counseling Acceptance : Accept or reject student counseling requests. Blogs Sharing : Share blogs with students. Material Request : Request materials needed in the classroom. Shuttle Schedule : Access shuttle schedule information.","title":"Faculty User"},{"location":"guideline/#staff-user","text":"Accept Requests : Accept material requests from faculty. Shuttle Update : Update real-time shuttle schedules. Issue Reporting : Report any issues to the admin.","title":"Staff User"},{"location":"guideline/#admin-user","text":"User Management : Add students, faculty, and staff. Issue Handling : Monitor and resolve reported issues. System Management : Supervise system operations and user data.","title":"Admin User"},{"location":"guideline/#step-by-step-usage","text":"Enrolling in a Course : Access the course enrollment section. Search for desired courses. Click \"Enroll\" to join a course. Requesting Counseling : Navigate to the counseling section. Choose a suitable time within the faculty's availability. Sharing Blogs and Notes : Visit the blog-sharing page. Click \"Save & Share\" to publish a blog or important note. Accessing Shuttle Schedules : Open the shuttle schedules section. View real-time shuttle departure times.","title":"Step-by-Step Usage"},{"location":"guideline/#troubleshooting","text":"If encountering issues or needing further assistance, please contact the admin or relevant support personnel for assistance. Enjoy using the University Management System!","title":"Troubleshooting"},{"location":"installation/","text":"Getting Started Clone Project Clone the project from github repo both client and server side Client-side Repo Clone the client-side project from the GitHub repository: https://github.com/Saif-Tasnim/UIU-MS.git Server-side Repo Clone the server-side project from the GitHub repository: https://github.com/Saif-Tasnim/UIU-MS-Server.git Install The Project Ensure Node.js is installed on your local device. If not, please download and install it from here . Server-side Installation Install server-side dependencies: npm install Run the server-side project: npm start Client-side Installation After the server-side project is running, navigate to the client-side project's terminal. Install required packages for the client-side: npm install Run the client-side project: npm run dev By following these commands, you can set up and run both the server and client sides of the project on your local machine.","title":"Installation Process"},{"location":"installation/#getting-started","text":"","title":"Getting Started"},{"location":"installation/#clone-project","text":"Clone the project from github repo both client and server side","title":"Clone Project"},{"location":"installation/#client-side-repo","text":"Clone the client-side project from the GitHub repository: https://github.com/Saif-Tasnim/UIU-MS.git","title":"Client-side Repo"},{"location":"installation/#server-side-repo","text":"Clone the server-side project from the GitHub repository: https://github.com/Saif-Tasnim/UIU-MS-Server.git","title":"Server-side Repo"},{"location":"installation/#install-the-project","text":"Ensure Node.js is installed on your local device. If not, please download and install it from here .","title":"Install The Project"},{"location":"installation/#server-side-installation","text":"Install server-side dependencies: npm install Run the server-side project: npm start","title":"Server-side Installation"},{"location":"installation/#client-side-installation","text":"After the server-side project is running, navigate to the client-side project's terminal. Install required packages for the client-side: npm install Run the client-side project: npm run dev By following these commands, you can set up and run both the server and client sides of the project on your local machine.","title":"Client-side Installation"},{"location":"testing/","text":"Unit Testing There is provided testing unit on some cases for improving better result of uiu ms project. Login Test Description Test the login functionality using Selenium WebDriver. This feature is tested by Saif Tasnim Chowdhury Code def test_login(): it('log in as a student', async () => { await driver.get('http://localhost:5173'); await driver.findElement(By.id('email')).sendKeys('schowdhury201223@bscse.uiu.ac.bd'); await driver.findElement(By.id('password')).sendKeys('123456', Key.RETURN); const dashboardTitle = await driver.getTitle(); assert.strictEqual(dashboardTitle, 'Student Dashboard'); }); Counselling Request Test Description Test the process of sending a counselling request using Selenium WebDriver. This features is tested by Arafat Hossen Code it(\"send a counselling request\", async () => { await driver.get(\"http://localhost:5173\"); await driver.findElement(By.id(\"counselingButton\")).click(); const requestSuccessMessage = await driver .findElement(By.id(\"requestMessage\")) .getText(); assert.strictEqual( requestSuccessMessage, \"Counseling request sent successfully.\" ); }); Enroll Course Test Description Test the course enrollment process using Selenium WebDriver. This features is tested by Abdul Muhit Chowdhury Code it(\"enroll a student into a course\", async () => { await driver.get(\"http://localhost:5173\"); await driver.findElement(By.id(\"enrollButton\")).click(); const enrollmentSuccessMessage = await driver .findElement(By.id(\"enrollmentMessage\")) .getText(); assert.strictEqual( enrollmentSuccessMessage, \"Successfully enrolled to the course.\" ); }); Post Blog Test Description Test the functionality of posting a blog using Selenium WebDriver. This features is tested by Iftakharul Islam Ifty Code it(\"allow a student to post a blog\", async () => { await driver.get(\"http://localhost:5173\"); await driver.findElement(By.id(\"blogButton\")).click(); await driver .findElement(By.id(\"blogContent\")) .sendKeys(\"Sample blog content...\"); await driver.findElement(By.id(\"postButton\")).click(); const postedBlog = await driver.findElement(By.id(\"latestBlog\")).getText(); assert.strictEqual(postedBlog, \"Sample blog content...\"); }); Counselling Acceptance Test Description Test the process of accepting counselling requests using Selenium WebDriver. This features is tested by Sirajum Monira Soha Code it(\"send a counselling request\", async () => { await driver.get(\"http://localhost:5173\"); await driver.findElement(By.id(\"counselingButton\")).click(); const requestSuccessMessage = await driver .findElement(By.id(\"requestMessage\")) .getText(); assert.strictEqual(requestSuccessMessage, \"Counseling request accepted.\"); });","title":"Testing"},{"location":"testing/#unit-testing","text":"There is provided testing unit on some cases for improving better result of uiu ms project.","title":"Unit Testing"},{"location":"testing/#login-test","text":"","title":"Login Test"},{"location":"testing/#description","text":"Test the login functionality using Selenium WebDriver. This feature is tested by Saif Tasnim Chowdhury","title":"Description"},{"location":"testing/#code","text":"def test_login(): it('log in as a student', async () => { await driver.get('http://localhost:5173'); await driver.findElement(By.id('email')).sendKeys('schowdhury201223@bscse.uiu.ac.bd'); await driver.findElement(By.id('password')).sendKeys('123456', Key.RETURN); const dashboardTitle = await driver.getTitle(); assert.strictEqual(dashboardTitle, 'Student Dashboard'); });","title":"Code"},{"location":"testing/#counselling-request-test","text":"","title":"Counselling Request Test"},{"location":"testing/#description_1","text":"Test the process of sending a counselling request using Selenium WebDriver. This features is tested by Arafat Hossen","title":"Description"},{"location":"testing/#code_1","text":"it(\"send a counselling request\", async () => { await driver.get(\"http://localhost:5173\"); await driver.findElement(By.id(\"counselingButton\")).click(); const requestSuccessMessage = await driver .findElement(By.id(\"requestMessage\")) .getText(); assert.strictEqual( requestSuccessMessage, \"Counseling request sent successfully.\" ); });","title":"Code"},{"location":"testing/#enroll-course-test","text":"","title":"Enroll Course Test"},{"location":"testing/#description_2","text":"Test the course enrollment process using Selenium WebDriver. This features is tested by Abdul Muhit Chowdhury","title":"Description"},{"location":"testing/#code_2","text":"it(\"enroll a student into a course\", async () => { await driver.get(\"http://localhost:5173\"); await driver.findElement(By.id(\"enrollButton\")).click(); const enrollmentSuccessMessage = await driver .findElement(By.id(\"enrollmentMessage\")) .getText(); assert.strictEqual( enrollmentSuccessMessage, \"Successfully enrolled to the course.\" ); });","title":"Code"},{"location":"testing/#post-blog-test","text":"","title":"Post Blog Test"},{"location":"testing/#description_3","text":"Test the functionality of posting a blog using Selenium WebDriver. This features is tested by Iftakharul Islam Ifty","title":"Description"},{"location":"testing/#code_3","text":"it(\"allow a student to post a blog\", async () => { await driver.get(\"http://localhost:5173\"); await driver.findElement(By.id(\"blogButton\")).click(); await driver .findElement(By.id(\"blogContent\")) .sendKeys(\"Sample blog content...\"); await driver.findElement(By.id(\"postButton\")).click(); const postedBlog = await driver.findElement(By.id(\"latestBlog\")).getText(); assert.strictEqual(postedBlog, \"Sample blog content...\"); });","title":"Code"},{"location":"testing/#counselling-acceptance-test","text":"","title":"Counselling Acceptance Test"},{"location":"testing/#description_4","text":"Test the process of accepting counselling requests using Selenium WebDriver. This features is tested by Sirajum Monira Soha","title":"Description"},{"location":"testing/#code_4","text":"it(\"send a counselling request\", async () => { await driver.get(\"http://localhost:5173\"); await driver.findElement(By.id(\"counselingButton\")).click(); const requestSuccessMessage = await driver .findElement(By.id(\"requestMessage\")) .getText(); assert.strictEqual(requestSuccessMessage, \"Counseling request accepted.\"); });","title":"Code"}]}